# -*- coding: utf-8 -*-
"""
Created on Wed Nov 27 13:19:48 2019

@author: mxg635
"""

from collections import namedtuple
import comtypes, comtypes.client
from ctypes import *
from comtypes.automation import *
import sys
import numpy
import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns


fp = ("Path")


def GetMSOrderForScanNum(xr, scanNumber):
        """This function returns the MS order for the scan specified by scanNumber from the scan
        event structure in the raw file.
        The value returned in the pnScanType variable is one of the following:
        Neutral gain -3
        Neutral loss -2
        Parent scan -1
        Any scan order 0
        MS  1
        ETC
        """
        MSOrder = c_long()
        error = xr.GetMSOrderForScanNum(c_long(scanNumber),byref(MSOrder))
        if error : raise IOError( "scan {} : GetMSOrderForScanNum error : {}".format(scanNumber,error) )
        return MSOrder.value


def GetLabelData(xr, scanNumber): # This is a higher level function than GetMassListRangeFromScanNum, only for profile data (MS1).
    """This method enables you to read the FT-PROFILE labels of a scan represented by the scanNumber.
    The label data contains values of :
    mass (double),
    intensity (double),
    resolution (float),
    baseline (float),
    noise (float)
    and charge (int).
    The flags are returned as unsigned char values. The flags are :
    saturated,
    fragmented,
    merged,
    exception,
    reference,
    and modified.

    NOTE : This is a higher level function than GetMassListRangeFromScanNum, only for profile data (MS1).
    """
    pvarLabels = comtypes.automation.VARIANT()
    pvarFlags = comtypes.automation.VARIANT()
    error = xr.GetLabelData(pvarLabels,pvarFlags,c_long(scanNumber))
    if error : raise IOError("GetLabelData error :", error)
    Labels = namedtuple('Labels', 'mass intensity resolution baseline noise charge')
    Flags = namedtuple('Flags', 'saturated fragmented merged exception reference modified')
    return pvarLabels.value[0], pvarLabels.value[1], pvarLabels.value[5]  #Don't need flags (Mass, Int, Charge)
    

def polymers(mz,ints,z):
    pol = 0
    pep = 0
    crap = 0
    if (len(mz) == len(ints)) and (len(mz) == len(z)):
        for i in range (len(mz)):
            if ints[i]>=1000000:
                if z[i] == 1.0:
                    pol+=ints[i]
                elif z[i] >= 2.0:
                    pep+=ints[i]
            else:
                crap += ints[i] #Not currently in use
        return([pol, pep,crap])

    else:
        return(-1)#Bad legnth



    
xr = comtypes.client.CreateObject('MSFileReader.XRawfile')
xr.open(fp)
res = xr.SetCurrentController(0,1)#Needed for some reason.
filename = fp.split('/')[-1][:-4]

ns = c_long()
xr.GetNumSpectra(ns)
print(ns.value) 
    
ms1dict = dict()

for i in range(1,ns.value):
    
    if GetMSOrderForScanNum(xr,i) == 1:
        
        
        ms1dict[i] = GetLabelData(xr,i)
print(len(ms1dict))


pdict = dict()
for keys in ms1dict:
    pdict[keys] =polymers(ms1dict[keys][0],ms1dict[keys][1],ms1dict[keys][2])

poldf = pd.DataFrame.from_dict(pdict)

poldfT = poldf.transpose()
poldfT.columns = ['Poly Int', 'Pep int', 'Crap Int']
poldfT.head()

poldfT['relative'] = poldfT['Poly Int']/ ((poldfT['Pep int']+poldfT['Poly Int']))

print(filename)
print(poldfT['relative'].mean())
print(poldfT['Poly Int'].mean()/1000000)
print(poldfT['Poly Int'].sum()/(poldfT['Pep int'].sum()+ poldfT['Poly Int'].sum()))
print(poldfT['Poly Int'].sum()/1000000000)
print(poldfT['Pep int'].sum()/1000000000)

plt.figure()
fig1 = poldfT.reset_index().plot.scatter(x = 'index', y='relative')
plt.tight_layout()
fig1.figure.savefig(filename+'rel_pol.png')

plt.figure()
fig2 = poldfT.reset_index().plot.scatter(x = 'index', y='Poly Int')# ylim = (0,35*(10**9)))
#plt.grid()
plt.tight_layout()
fig2.figure.savefig(filename+'Pol_Int.png')

plt.figure()
fig3 = poldfT.reset_index().plot.scatter(x = 'index', y='Pep int')#, ylim = (0,(3*10**10)))

plt.tight_layout()
fig3.figure.savefig(filename+'pep_Int.png')
